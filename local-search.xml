<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2021年终总结</title>
    <link href="/2021/12/31/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2021/12/31/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>2021年是新冠疫情的第二年，在这一年里我依然见到了人性的光辉和伟大。同时在这一年也是我个人面临重大选择的一年，无论对错，只关内心。</p>          </div><h1 id="考研or找工作"><a href="#考研or找工作" class="headerlink" title="考研or找工作"></a>考研or找工作</h1><ul><li>首先是要梳理一下自己的职业规划和行业要求。比如如果是医、法这类行业对学校/学历有着强要求的专业，完全不用思考，必须考。或者可能有人想在北上广等一线城市落户，那有的城市有积分落户政策，研究生落户比本科生难度低，这种也是可以考虑读研的。再比如有人将来想从事算法类工作，那读研基本上可以说是完全必要的。所以我的看法是：如果研究生学历是达到我们将来目标中不可获取的一环，那读研应该是一种十分必要的手段和阶段。 </li><li>对比不要有时间差。我们常拿自己本科毕业和如果研究生毕业对比，从而认为读研可以有更好的发展，这种对比从社会整体的角度/公司招聘的角度来看是没有问题的，但是落实在个人身上有时间差，<strong>我个人认为</strong>正确的对比应该是本科毕业两三年 和 研究生毕业对比，本科毕业两三年会不会比自己研究生毕业有更多的行业选择（这里只强调互联网行业，考公/进国企/选调不在此类的讨论范围内，因为我个人不是很偏向非互联网行业） </li><li>两者的quit成本。就目前国内的研究生选拔/培养而言，考研无论是选校，还是选导师都有不小的风险。如果遇到比较难接受的导师，可能会对自己的研究生生涯带来比较大的消极影响。那就考虑进了一家坑公司的quit成本和入学之后quit的成本，哪个更高，哪个更能接受。 </li><li>年龄优势。这一点是针对我个人而言的，相当一部分人可能并不具备这一优势。因为我目前还未满20周岁，所以即使我工作两三年后发现研究生学历是我未来发展不可获取的一环，然后去考研读研，年龄可能和毕业后直接读研的同学年龄上是差不多的。</li></ul><h1 id="秋招经历"><a href="#秋招经历" class="headerlink" title="秋招经历"></a>秋招经历</h1><h1 id="加密货币"><a href="#加密货币" class="headerlink" title="加密货币"></a>加密货币</h1>]]></content>
    
    
    
    <tags>
      
      <tag>2021</tag>
      
      <tag>年终总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty学习</title>
    <link href="/2021/12/31/Netty%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/12/31/Netty%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h2><p><img src="....%5Cthemes%5Cfluid%5Csource%5Cimg%5Cimage-20211231172522178.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(ByteBuf buf)</span> </span>&#123;<br>    StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder()<br>        .append(<span class="hljs-string">&quot;readerIndex:&quot;</span>).append(buf.readerIndex() + <span class="hljs-string">&quot; &quot;</span>)<br>        .append(<span class="hljs-string">&quot;writerIndex:&quot;</span>).append(buf.writerIndex() + <span class="hljs-string">&quot; &quot;</span>)<br>        .append(<span class="hljs-string">&quot;capacity: &quot;</span>).append(buf.capacity() + <span class="hljs-string">&quot; &quot;</span>)<br>        .append(<span class="hljs-string">&quot;maxCapacity: &quot;</span>).append(buf.maxCapacity() + <span class="hljs-string">&quot; &quot;</span>)<br>        .append(StringUtil.NEWLINE);<br>    io.netty.buffer.ByteBufUtil.appendPrettyHexDump(sb, buf);<br>    System.out.println(sb.toString());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ProtoBuf入门</title>
    <link href="/2021/12/29/probuf%E5%85%A5%E9%97%A8/"/>
    <url>/2021/12/29/probuf%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、为什么使用ProtoBuf"><a href="#一、为什么使用ProtoBuf" class="headerlink" title="一、为什么使用ProtoBuf"></a>一、为什么使用ProtoBuf</h1><ul><li>ProtoBuf是一种序列化技术，在现代网络通信中无法直接在网络中传输Java中的对象，而是要将其进行序列化。</li><li>与Java原生的Serialization相比，ProtoBuf本身是跨语言（支持C++、Python、Go、Java等多门语言）、与平台无关的序列化方式，而Serialization无法跨语言是其一大弊端。</li><li>与XML相比，ProtoBuf的优点是序列化后的码流小，传输效率高。在分布式系统中之所以把整体的单机服务做切分就是为了降低单台机器所承担的压力提高响应效率，而RPC与本地调用的一大区别就是有网络的参与，所以RPC中的一个重点关注的问题就是在不稳定的网络中如何确保信息的安全、可靠、高效。</li></ul><h1 id="二、ProtoBuf的使用"><a href="#二、ProtoBuf的使用" class="headerlink" title="二、ProtoBuf的使用"></a>二、ProtoBuf的使用</h1><p>这里直接引用 <a href="https://developers.google.com/protocol-buffers/docs/javatutorial">ProtoBuf官方文档</a> 中的叙述：</p><blockquote><ul><li>Define message formats in a <code>.proto</code> file.</li><li>Use the protocol buffer compiler.</li><li>Use the Java protocol buffer API to write and read messages.</li></ul></blockquote><h2 id="1-在-proto文件中定义消息格式"><a href="#1-在-proto文件中定义消息格式" class="headerlink" title="1. 在.proto文件中定义消息格式"></a>1. 在.proto文件中定义消息格式</h2><p>创建一个 <code>.proto</code> 文件，在<code>.proto</code>文件中使用<code>message</code>定义希望进行序列化的数据结构，每个<code>message</code>中包含了字段及其类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">syntax = <span class="hljs-string">&quot;proto2&quot;</span>;<br><br><span class="hljs-keyword">package</span> tutorial;<br><br>option java_multiple_files = <span class="hljs-keyword">true</span>;<br>option java_package = <span class="hljs-string">&quot;com.example.tutorial.protos&quot;</span>;<br>option java_outer_classname = <span class="hljs-string">&quot;AddressBookProtos&quot;</span>;<br><br>message Person &#123;<br>  optional string name = <span class="hljs-number">1</span>;<br>  optional int32 id = <span class="hljs-number">2</span>;<br>  optional string email = <span class="hljs-number">3</span>;<br><br>  <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">PhoneType</span> </span>&#123;<br>    MOBILE = <span class="hljs-number">0</span>;<br>    HOME = <span class="hljs-number">1</span>;<br>    WORK = <span class="hljs-number">2</span>;<br>  &#125;<br><br>  message PhoneNumber &#123;<br>    optional string number = <span class="hljs-number">1</span>;<br>    optional PhoneType type = <span class="hljs-number">2</span> [<span class="hljs-keyword">default</span> = HOME];<br>  &#125;<br><br>  repeated PhoneNumber phones = <span class="hljs-number">4</span>;<br>&#125;<br><br>message AddressBook &#123;<br>  repeated Person people = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>java_multiple_files = true</code> 可以让每个生成类单独生成一个<code>.java</code>文件，而不是嵌套在一个文件中。<code>java_package = &quot;com.example.tutorial.protos&quot;</code> 声明生成文件的包地址。 <code>java_outer_classname = &quot;AddressBookProtos&quot;</code> 生成文件名。</p><p>上面的定义中声明了两个类 <code>Person</code>、 <code>Message</code>，在<code>Person</code>类中又定义了一个 <code>PhoneNumber</code> 类 。<code>string</code>、<code>int32</code> 都是字段的类型。</p><p>每个字段都必须被下列中的一个修饰符所注释：</p><ul><li><code>option</code>：字段可能被设置也可能不被设置，如果不设置会直接使用字段类型所对应的默认值。</li><li><code>repeated</code>：字段是可以重复多次的（可以重复0次）。在compiler编译之后会变成Java的List集合。</li><li><code>required</code>：字段的值必须进行设置，如果不设置就会被视为“未初始化”。尝试构建一个未初始化的message会抛出<code>RuntimeExceptiona</code>。解析一个未初始化的message会抛出<code>IOException</code>。</li></ul><div class="note note-danger">            <p><strong>Required Is Forever</strong> You should be very careful about marking fields as <code>required</code>. If at some point you wish to stop writing or sending a required field, it will be problematic to change the field to an optional field – old readers will consider messages without this field to be incomplete and may reject or drop them unintentionally. You should consider writing application-specific custom validation routines for your buffers instead. Within Google, <code>required</code> fields are strongly disfavored; most messages defined in proto2 syntax use <code>optional</code> and <code>repeated</code> only. (Proto3 does not support <code>required</code> fields at all.)</p>          </div><h2 id="2-使用-protocol-buffer-编译器"><a href="#2-使用-protocol-buffer-编译器" class="headerlink" title="2.使用 protocol buffer 编译器"></a>2.使用 protocol buffer 编译器</h2><ol><li>首先是要下载和配置编译器，这部分可以看官网文档。ProtoBuf是跨语言的，无论什么语言在定义时都是先定义<code>.proto</code>文件，只是不同语言对应的编译器不同</li><li>在cmd中运行complier，命令格式 <code>protoc -I=$SRC_DIR --java_out=$DST_DIR $SRC_DIR/addressbook.proto</code> </li></ol><h2 id="3-使用protocol-buffer-API"><a href="#3-使用protocol-buffer-API" class="headerlink" title="3.使用protocol buffer API"></a>3.使用protocol buffer API</h2><p>protocol buffer采用的是Builder模式，通过Builder创建对象以及对属性进行设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">SubscribeRespProto.SubscribeResp.Builder builder = SubscribeRespProto.SubscribeResp.newBuilder();<br>builder.setSubReqID(subReqID);<br>builder.setRespCode(<span class="hljs-number">0</span>);<br>builder.setDesc(<span class="hljs-string">&quot;Netty book order succeed, 3 days later, sent to the designated address&quot;</span>);<br><span class="hljs-keyword">return</span> builder.build();<br></code></pre></td></tr></table></figure><p>序列化与反序列化：</p><ul><li><code>byte[] toByteArray();</code>: 将message序列化为byte数组返回</li><li><code>static Person parseFrom(byte[] data);</code>:从给的一个byte数组中解析出Person类</li><li><code>void writeTo(OutputStream output);</code>: 序列化message并写到输入流中</li><li><code>static Person parseFrom(InputStream input);</code>: 从一个输入流中读取和解析</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ProtoBuf</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
